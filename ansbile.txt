Ansible - **инструмент автоматизации и система управления конфигураций.

Плюсы :

- Не требует установки клиентов – агентов на целевых машинах.

- Использует ssh соединение.

- Написан на Python

- Конфигурации пишутся на YAML

- Есть портал с готовыми конфигурациями Ansible Galaxy.

Конфиг ansible по умолчанию после установки :

/etc/ansible/ansible.cfg


В файле ansible.cfg можно задать параметр :

Host_key_checking = false, что бы не было проверки рукопожатия (инициализация, обмен ключами)


Контроллер –>Target

В этой задаче мы проверяем доступ по ssh по паролю к серверу target через сервер контроллер, с помощью пинга командами ansible.

Что бы пинг прошел успешно необходимо напрямую сначала подключиться по ssh через сервер, для получения хеш ключ.

После чего проверяем подключение с помощью команды :

![[Pasted image 20241116045248.png]]
Все прошло успешно.


![[Pasted image 20241116045344.png]]

Файл   inventory

![[Pasted image 20241116045355.png]]

Можно так же выполнять подключения по ssh по ключу, для этого создаем ключ на сервере Controller “ssh-keygen”

После чего переходим в директорию - /root/.ssh

Там наши ключи приватный и публичный.

Далее публичный ключ переносим на наш Target сервер в файл :

/root/.ssh/authorized_keys

В inventory прописываем путь до приватного ключа :

ansible_ssh_private_key=/root/.ssh/id.rsa

При подключении может быть ошибка вида :
![[Pasted image 20241116045412.png]]

В таком случае на Controller сервере надо установить утилиту sshpass. (**утилита, которая позволяет выполнять команды на удалённом сервере по SSH без ввода пароля вручную**)

ansible target1 -m setup – информация по серверу target1

можно использовать shell или command :

ansible target1 -m shell -a "cat /etc/hosts"

но при команде shell не будет проверять есть уже этот файл или нету, просто перезапишет

ansible target1 -m file -a "path=/root/test-ansible.txt state=touch"

создать файл

Если в inventory пользователь не root указан, можно в targer сервере, предоставить ему права, пример :

Вводим – visudo

![[Pasted image 20241116045449.png]]

Копируем файл с контр сервера :

![[Pasted image 20241116045506.png]]

-b ключ, для сервера, где пользователь не root

- name: Run a shell command

  command: df -h

  register: storage

- debug: var=storage.stdout_lines

В этом примере:

1.     Команда df -h выполнится на удалённой машине, и её результат будет сохранён в переменной storage.

2.     storage.stdout_lines будет содержать вывод команды в виде списка строк.

3.     Директива debug выведет этот список на экран, чтобы можно было увидеть результат выполнения команды.

Это полезно при отладке или проверке содержимого переменных, чтобы убедиться, что команда выполнилась правильно, и вывести результат в читаемом формате.


### **YAML**

**КЛЮЧ: ЗНАЧЕНИЕ**

Ключи разделены двоеточием, также после двоеточия пробел.

![[Pasted image 20241116045531.png]]

**Массивы / Списки**

После названия двоеточие, новая строка с тире и элемент массива.

![[Pasted image 20241116045553.png]]

**Словари / Мапы**

После имени двоеточие, далее с новой строки ключ, значение.

![[Pasted image 20241116045703.png]]

![[Pasted image 20241116045711.png]]

![[Pasted image 20241116045715.png]]


ansible_host – указать хост для подключения

ansible_user – указывает root или другого пользователя

`ansible``_``connection` `– указывает для` `Linux` `“``ssh``”,``Windows` `“``winrm``”, локальная сеть “``local``”, для докера “``docker``”`

ansible_ssh_pass – для Linux указываем пароль

`ansible_password –` `для` `Windows` `указываем` `пароль`

ansible_host, ansible_user, `ansible_connection` `и` `т``.``д``.` `это` `все` `переменные`

`C``оздаем` `группы`

[web_servers]

web1

web2

web3

[db_servers]

db1

Создаем группу содержащюю другие группы

[all_servers:children]

web_servers

db_servers

Ansible playbook

Аnsible Playbooks — **это списки задач, которые автоматически выполняются для указанного вами инвентаря или групп хостов.**

ansible-playbook исполняет playbook. Playbook — это файл с расширением yml/yaml, внутри которого что-то такое:

- name: Update Packages on target system

  hosts: all – перечисляете на каких хостах исполнять

  become: yes

  tasks: - что нужно исполнять

  - name: Install ntpdate

    ansible.builtin.package:

      name: ntpdate

      state: present

Playbook — это список, состоящий из play и import_playbook.  
Вот это — одна play:

- hosts: group1

  roles:

    - role1

и вот это тоже ещё одна play:

- hosts: group2,group3

  tasks:

    - debug:

Play — это ключевой элемент для playbook, потому что play и только play связывает список ролей и/или тасок с списком хостов, на которых их надо выполнять

**Модули** **в** **Ansible**

**System** **модуль** **:**

- user

- group

- hostname

- iptables

- Lvg

- Lvol

- Make

- Mount

- Ping

- Timezone

- Systemd

- Service

Для выполнения задач связанных с конфигурированием систем управляемых хостов.

Выполняет команду на удаленном узле

**Commands** **модуль :**

- Command

- Expect

- Raw

- Script

- Shell

Для запуска скриптов или команд

Files модуль :

- Acl

- Archive

- Copy

- File

- Lineinfile

- Replace

- Stat

-Template

- Unarchive

Для работы с файлами

Модуль Database :

-Aerospike

- influxdb

- Mssql

- Mysql

- Postgresql

-Proxysql

-Vertica

Для работы с БД

Cloud модуль :

- Azure

- Amazon

- Docker

- Vmware

- Google

- Openstack

Для работы с облаком

Доп модули :

ansible target1 -m setup -i inventory

вывед инфу об ОС (сеть, IP, и т.п)

Примеры плейбука :

-

    name: 'Execute a script on all web server nodes'

    hosts: web_nodes

    tasks:

        -

         lineinfile:

            path: /etc/resolv.conf

            line: nameserver 10.1.250.10

        -

     ansible.builtin.user:

      name: johnd

      uid: 1040

      group: admin

        -

            name: 'Execute a script'

            script: /tmp/install_script.sh

        -

            name: 'Start httpd service'

            service:

                name: httpd

                state: present

**Переменные** **в** **ansible**

Переменная используется для хранения значений.

**Vars****_****files****: включение переменных из другого файла**

Пример :

name: …

hosts: …

vars_files:

-         atop_install.yml

tasks:

**как выглядит файл откуда забираем значение переменных :**

http_port: 90

snmp_port: 160-181

inter_ip: 192.8.8.8

**Пример** **в** **плейбуке****:**

**-**

  **name: test**

  **hosts: target1**

  **vars:**

        **dns_server: 77.88.8.8**

  **tasks:**

         **-**

          **lineinfile:**

                **path: /etc/resolv.conf**

                **line: nameserver {{dns_server}}**

**произойдет замена во время** **play****, вместо**  **dns****_****server** **будет значение - 77.88.8.8**

**так же можем создать файл для** **var**

**Пример** **:**

**_cat playbook_variables.yml_**

**_dns_server: 8.8.8.8_**

**_После чего добавляем его в наш плейбук :_**

**_-_**

  **_name: test_**

  **_hosts: target1_**

  **_vars_files:_**

        **_- /project/playbook_variables.yml_** **–** **путь** **к** **переменной**

  **_tasks:_**

        **_- lineinfile:_**

           **_path: /etc/resolv.conf_**

           **_line_****_:_** **_nameserver_** **_{{_****_dns_****___****_server_****_}}_**

**---------------**

**Как запретить ansible останавливать выполнение task после обнаружения ошибки?**

Установить флаг ignore_errors: True для task.

- name: Run a shell command

  command: df -h

  register: storage

- debug: var=storage.stdout_lines

В этом примере:

1.     Команда df -h выполнится на удалённой машине, и её результат будет сохранён в переменной storage.

2.     storage.stdout_lines будет содержать вывод команды в виде списка строк.

3.     Директива debug выведет этот список на экран, чтобы можно было увидеть результат выполнения команды.

**Условные выражения** **Ansible**

Можем использовать условие when, что бы не изменять каждый раз hosts

Пример :

_-_

  _name: test_

  _hosts: target1_

  _tasks:_

     _- service:_

        _name: httpd_

        _state: started_

       _when: ansible_host == 'target1'_

**плей пройдет ОК если условие будет выполнено**

**-------------**

**В Ansible есть встроенная переменная «****ansible****_****os****_****family****»**

**В** **Ansible** **есть** **встроенная** **переменная** **«ansible_distribution_version»**

Пример :

_-_

  _name: install_

  _hosts: all_

  _tasks:_

      _- name: install nginx Ubuntu_

        _apt:_

         _name: nginx_

         _state: present_

        _when: **ansible_os_family == 'Debian' or**_

                    _**ansible_distribution_version == “20.04”**_

      _- name: install nginx Centos_

        _yum:_

         _name: nginx_

         _state: present_

        _when: **ansible_os_family == 'RedHat' or**_

                   **_ansible_****___****_os_****___****_family_** **_== '_****_SUSE_****_'_**

**Play** **пройдет ОК, если условие будет выполнено**

**Оператор** **or** **(или), то есть установка будет происходить если условие будет выполнено** **RedHat** **или** **SUSE**

**Вместо** **or** **можно использовать оператор** **and**

![[Pasted image 20241116045809.png]]


-

    name: 'Add name server entry if not already entered'

    hosts: localhost

    tasks:

        -

            shell: 'cat /etc/resolv.conf'

            register: command_output -

        -

            shell: 'echo "nameserver 10.0.250.10" >> /etc/resolv.conf'

            when: "command_output.stdout.find(\"10.0.250.10\") == -1"

С помощью ключа `register`, можно записать результат работы модуля `shell` в переменную с произвольным именем, например, `home_dirs`. И использовать эту переменную в другой задаче, при вызове модуля `cron`.

В Ansible параметр `register` используется для сохранения (регистрации) вывода команды или задачи в переменную. Это позволяет использовать результат задачи в последующих действиях, например, в условиях (`when`), в циклах или для отладки.

- name: status atop

  hosts: target1

  tasks:

    - command: systemctl status atop

      register: command_output - **Захват** **вывода**: **Когда** **задача** **выполняется** **(** **команда** `**systemctl status atop**`**),** **вывод** **задачи** **(****как** **стандартный** **вывод****,** **так** **и** **ошибки****)** **сохраняется** **в** **переменную**. command_output

      ignore_errors: true  - **необходимо, что бы проигнорировал** **play** **ошибки при выполнении (когда сервис лежит, он будет выдавать ошибки и не поднимет его, выставив данный параметр, мы это игнорим)**

    - command: systemctl start atop

      when: command_output.stdout.find('inactive') != -1 – если в переменной command_output будет найдено слово inactive, в таком случае сработает команда systemctl start atop
      ![[Pasted image 20241116045833.png]]
     
     

Become – Выполнение с правами суперпользователя

- name :

  hosts:

  become: yes

description - дополнительное поле, которое можно использовать в плейбуках для документирования или описания определенных элементов

**Циклы** **в** **Ansible**

  loop –директива цикла, выполняет одну задачу несколько раз.

После того когда она выполняется, сохраняет значение каждого элемента в цикле, в переменной с именем **item**

Можно использовать так же with_items, play сработает так же, просто ранее использовали её до loop.

Выбери команду для получения SSH-ключа из `/home/max/.ssh/id_rsa.pub`

debug: msg={{ lookup('file','/home/max/.ssh/id_rsa.pub') }}

**Роли в** **Ansible**

**C****деланы роли для удобства, что бы каждый сервис к примеру отдельно был в каждой роли и не мешанина в одном плейбуке была**

**Оператор** **Include**

**Разносим переменные и таски по разным файлам**

![[Pasted image 20241116045918.png]]

![[Pasted image 20241116045931.png]]

![[Pasted image 20241116045935.png]]

![[Pasted image 20241116045941.png]]

![[Pasted image 20241116045946.png]]

**Назначаем роли на пустые сервера**

**После того как все написали и запустили, ОК БД установилась на сервере.**

**И  что бы каждому кому еще понадобится данный плейбук, и не копипастить каждый раз снова данные из плейбука, можно задать роль**

![[Pasted image 20241116045958.png]]



**Цель ролей, сделать нашу работу переиспользованной**

**https://galaxy.ansible.com/ui/**

**Что бы начать использовать роль, необходимо создать структуру каталогов, необходимую для роли, но вручную это делать не о бязательно, можно использовать ИНСТРУМЕНТ :**

_ansible-galaxy init mysql-role_       

![[Pasted image 20241116050005.png]]

_Если в каталоге с плейбуком не найдено будет ролей, то обычно_ _ansible_ _ищет их в каталоге :_

_/__etc__/__ansible__/__roles_ _, либо можно напрямую указать путь_

_Путь к ролям указан в файле /__etc__/__ansible__/__ansible__.__cfg_

_```_

_Roles_path = /etc/ansible/roles_

_```_

_Если необходима роль  с сайта_ _galaxy__, можно ввести :_

_Ansible-galaxy search mysql-role_

_Чтобы запустить роль используем команду :_

_Ansible-galaxy install mysql….._

![[Pasted image 20241116050019.png]]

Можно так же указать доп опции, например become, увеличить привелегии,

Mysql_user_name: chill

![[Pasted image 20241116050025.png]]

_Можно указать путь к роли и добавить переменные_

![[Pasted image 20241116050032.png]]

![[Pasted image 20241116050035.png]]

_ansible-galaxy init mysql-role_

после чего создается дира с именем mysql-role

 в ней будут файлы и директории :

**defaults** – переменные которые будут по умолчанию

**files** **–** будут скопированные файлы которые мы переносим на наши клиенты

**handlers** **–** устанавливаются хендлерсы (перезапуск сервисов)

**meta** **–**

**README****.****md** **–**

**tasks** **–** будут записываться все наши таски, в нем есть файл main.yml

«не создаем отдельно плейбук, где пишем таски», то есть ansible по умолчанию идет в этот файл и смотрит таски

**templates** **–** наши образы

**tests** **–** какие-то тесты, к примеру что бы после плейбука выполнялись

**.****travis****.****yml**

**vars** **–** записываем наши переменные

«не создаем отдельно плейбук где пишем переменные»

**DEBUG** **в** **Ansible**

![[Pasted image 20241116050058.png]]

**Выводит информацию по переменным в данном примере**


В Ansible директива `notify` используется для того, чтобы оповестить (или триггернуть) выполнение хэндлеров (handlers) — специальных задач, которые запускаются только при изменении состояния управляемого ресурса. Например, если Ansible изменяет конфигурационный файл, то можно с помощью `notify` вызвать хэндлер, который перезапустит сервис для применения новых настроек.

### Как это работает:

1.      **Задача, которая вызывает изменения:**  
Если задача в playbook изменила что-то (например, скопировала новый конфигурационный файл), она может "уведомить" хэндлер о необходимости действия.

2.      **Хэндлер:**  
Это специальные задачи, которые запускаются только в случае вызова через `notify`. Обычно хэндлеры определяются в конце playbook или в отдельной секции и содержат команды вроде перезагрузки сервисов.

### Пример:

**---**

**-** **hosts****:** **all**

  **tasks****:**

    **-** **name****: Копировать конфигурационный файл** **nginx**

      **copy:**

        **src: /path/to/nginx.conf**

        **dest: /etc/nginx/nginx.conf**

      **notify:**

        **- Restart nginx  # уведомление для хэндлера**

  **handlers:**

    **- name: Restart nginx**

      **service:**

        **name: nginx**

        **state****:** **restarted**

В этом примере, если конфигурационный файл Nginx изменился, то будет вызван хэндлер, который перезапустит Nginx. Если файл не изменится, хэндлер не будет вызван.

Таким образом, `notify` позволяет избежать ненужных действий, например, перезапуска сервисов, если фактически не было изменений в конфигурации.

---


### **КУРС ОТДЕЛЬНЫЙ**


Ansible - **инструмент автоматизации и система управления конфигураций.
Ansbile использует Push - на управляемых серверах ничего не установлено, Master делает Push настроек.**

Альтернативы Ansible :
CHEF 
PUPPET 
Pull - на управляемых серверах установлен Agent, который делает Pull настроек от Master.

Работа происходит через протоколы и порты :
L I N U X - ssh Port 22
W I N D O W S - WinRM Port 5986

---

Создали директорию "newproject" и в нем создали invenrory файл с данными :

```
[servers]
target1 ansible_host=target1 ansbile_user=root ansible_ssh_priveta_key_file=/root/.ssh/id_rsa
```


в файле *ansible.cfg* прописываем :

```
host_key_checking = false # что бы каждый раз рукопожатие не подтверждать
inventory = /newproject/inventory # путь до файла с хостами

```

---

AD - HOC команды которые прописываются в консоле 


==Информация по серверу==

```
ansible target1 -m setup 
```


==Пропишется команда uptime на сервере и выдаст время==

```
ansible target1 -m shell -a "uptime" 
```

==Можно запустить так, но он будет работать не через shell, не будет видеть окружающие среды (к примеру нельзя grep использовать и тп.)==

```
ansible target1 -m command -a "uptime" 
```

==Копирование файла в диру home, -b нужно если мы не под root и нужно прописать sudo, то есть -b = sudo==

```
ansible target1 -m copy -a "src=privet.txt dest=/home" -b # 
```

==Удалит файл в директории home, state=absent - стрирает==

```
ansible target1 -m file -a "path=/home/privet.txt state=absent" -b
```

==Что-то если мы хотим скачать, вместо link ссылка==

```
ansible target1 -m get_url -a "url=link dest=/home" -b
```

==Установить утилиту на сервер==

```
ansible target1 -m yum -a "name=stress state=installed" -b
```

==Запустить сервис и выставить enabled, -vvvv посмотреть информацию, что происходит во время отработки==

```
ansible target1 -m service -a "name=httpd state=started enabled=yes" -b -vvvv
```

==Посмотреть к каким серверам, какие переменные относятся==

```
ansible-inventory --list
```


### Немного YAML 

В основном всё ключ : значение

```
---

- fruits:
    - apple
    - orange

- vasya:
    nick: potato
    skill: 
      - orange
      - banane

```


### group_vars

по - хорошему все переменные должны быть отдельно выставлены, в inventory все по минимуму.

то есть создаем директорию group_vars, и в ней создаем файлы с наименованием групп
К примеру была группа :

```
[prod:vars]
xxxxx = yyyy
xxxx = yyy
xx = yy
```

Мы создаем файл с именем prod, и в него закидываем все переменные со значениями.

Пример :

```
---
xxxx : yyyy
xxxx : yyy
xx : yy
```


### Playbook

==PLAY_1==

```
---

- name: Test Connection to my servers
  become: yes # если пускаем не по рутом, что бы прописывалось sudo
  hosts: all

  tasks:

  - name: Ping my servers
    ping:

```

```
[root@ansible-controller newproject]# ansible-playbook playbook1.yml

PLAY [Test Connection to my servers] ***********************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************************
ok: [target1]

TASK [Ping my servers] *************************************************************************************************************************************
ok: [target1]

PLAY RECAP *************************************************************************************************************************************************
target1                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

```

==PLAY_2==

```
---

- name: INstall Apache
  hosts: all

  tasks:
  - name: install apache
    yum: name=httpd state=latest

  - name: Start Apache
    service: name=httpd state=started
```

```
[root@ansible-controller newproject]# ansible-playbook playbook2.yml

PLAY [INstall Apache] **************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************************
ok: [target1]

TASK [install apache] **************************************************************************************************************************************
ok: [target1]

TASK [Start Apache] ****************************************************************************************************************************************
changed: [target1]

PLAY RECAP *************************************************************************************************************************************************
target1                    : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

```

==PLAY_3==

```
---

- name: INstall Apache and Upload my Web Page
  hosts: all

  vars:
    source_file: /var/www/index.html # откуда копируем с мастера
    destination_file: /var/ # куда копируем на дочерний сервер

  tasks:
  - name: Install apache
    yum: name=httpd state=latest

  - name: Copy
    copy: src={{ source_file }} dest={{ destination_file }}
    notify: Restart Apache

  handlers: 
  - name: Restart Apache
    service: name=httpd state=restarted
```


Отдельно про handlers :

```
  handlers: 
  - name: Restart Apache
    service: name=httpd state=restarted

Когда файл изменился index.html, мы повторно его синкаем, но так как Apache у нас запущен, в таком случае playbook не будет для него работать

Поэтому подключили handlers и подписади под Copy notify, когда произойдет изменение в файле, то apache перезагрузится только в этом случае
если файл не изменился, handlers не сработает.
```


```
[root@ansible-controller newproject]# ansible-playbook playbook3.yml

PLAY [INstall Apache and Upload my Web Page] ***************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************************
ok: [target1]

TASK [Install apache] **************************************************************************************************************************************
ok: [target1]

TASK [Copy] ************************************************************************************************************************************************
changed: [target1]

PLAY RECAP *************************************************************************************************************************************************
target1                    : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

```

==PLAY_4==

Директива ==debug== выведет этот список на экран, чтобы можно было увидеть результат выполнения команды.

set_fact модуль объединяет переменные

```
---
- name: My Playbook
  hosts: all


  vars:
   message1: Privet
   message2: World
   secret  : darova


  tasks:
  - name: Print test
    debug:
      var: secret

  - debug:
      msg: "Sekretnoe slovo: {{ secret }}"

  - debug:
      msg: "Vladelec Etogo Servera --> {{ owner }} <--"

  - set_fact: full_message="{{ message1 }} {{ message2 }} from {{ owner }}"

  - debug:
      var: full_message


```

```

[root@ansible-controller newproject]# ansible-playbook playbook4.yml

PLAY [My Playbook] *****************************************************************************************************************************************

TASK [Gathering Facts] *************************************************************************************************************************************
ok: [target1]

TASK [Print test] ******************************************************************************************************************************************
ok: [target1] => {
    "secret": "darova"
}

TASK [debug] ***********************************************************************************************************************************************
ok: [target1] => {
    "msg": "Sekretnoe slovo: darova"
}

TASK [debug] ***********************************************************************************************************************************************
ok: [target1] => {
    "msg": "Vladelec Etogo Servera --> chill <--"
}

TASK [set_fact] ********************************************************************************************************************************************
ok: [target1]

TASK [debug] ***********************************************************************************************************************************************
ok: [target1] => {
    "full_message": "Privet World from chill"
}

PLAY RECAP *************************************************************************************************************************************************
target1                    : ok=6    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0


```

Дополнительно :

```
  - shell: uptime
    register: result

  - debug:
      var: result
```
Мы хотим узнать uptime сервера, но просто так он не выведет его.
Пишем модуль register, и прописываем debug

```
TASK [shell] ***********************************************************************************************************************************************
changed: [target1]

TASK [debug] ***********************************************************************************************************************************************
ok: [target1] => {
    "result": {
        "changed": true,
        "cmd": "uptime",
        "delta": "0:00:00.003475",
        "end": "2025-01-30 17:47:59.533866",
        "failed": false,
        "rc": 0,
        "start": "2025-01-30 17:47:59.530391",
        "stderr": "",
        "stderr_lines": [],
        "stdout": " 17:47:59 up 23 min,  1 user,  load average: 0.00, 0.01, 0.02",
        "stdout_lines": [
            " 17:47:59 up 23 min,  1 user,  load average: 0.00, 0.01, 0.02"
        ]
    }
}

```